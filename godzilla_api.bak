/*
  File:    godzilla_api.h
  Purpose: This file provides implementations for the basic functions
           of Godzilla.
*/

#define LOW_POWER 25
#define MEDIUM_POWER 50
#define HIGH_POWER 75
#define MAX_POWER 100

#define FORWARD 1
#define BACKWARD -1

#define TURN_LEFT -1
#define TURN_RIGHT 1

#define UP 1
#define DOWN -1

const float CAR_RADIUS = 8.0;       // Measured in centimeter.
const float WHEEL_RADIUS = 2.16;     // Measured in centimeter.
const float WHEEL_DIAMETER = 4.32;   // Measured in centimeter.

const int COMPLETE_TURN = 360;      // Measured in degrees.
const int HALF_TURN = 180;          // Measured in degrees.

const int BOTH_MOTORS = OUT_BC;
const int MOTOR_RIGHT = OUT_B;
const int MOTOR_LEFT = OUT_C;
const int MOTOR_ARM = OUT_A;

const bool SYNCHRONIZED = true;
const bool DESYNCHRONIZED = false;

const bool DO_STOP = true;
const bool NOT_STOP = false;

const int P = 40;
const int INTEGRATIVE = 40;
const int DERIVATIVE = 90;

/* Moves car forward or backward.
   <p>
   @param distance: the distance that must be traveled by the robot.
                    It is measured in centimeters.
   @param power: the power on the move will be made.
   @param direction: movimentod the direction of the robot.
                     Can be forward or backward.
 */
sub move( const int distance, const int power, const int direction ){
  int amount_turns =
    ( COMPLETE_TURN * distance * direction )/ ( PI * WHEEL_DIAMETER );

  RotateMotor( BOTH_MOTORS, power, amount_turns );
}

/* Turns car to the left or right.
   <p>
   @param angle: the angle that the robot should turn. It is measured in degrees.
   @param power: the power on the move will be made.
   @param direction: movimentod the direction of the robot.
                     Can be forward or backward.
*/
sub turn( const int angle, const int power, const int direction ){
  int car_arc = ( angle * PI * CAR_RADIUS )/ HALF_TURN; // Measured in centimeter
  int amount_turns = 
    ( HALF_TURN * car_arc )/ ( PI * WHEEL_RADIUS ); // Measured in centimeter

  RotateMotorExPID( BOTH_MOTORS, power, amount_turns, 100 * direction,
                    SYNCHRONIZED, DO_STOP, P, INTEGRATIVE, DERIVATIVE );
}

/* Moves the arm of the robot. This moves has a direction: up or down.
   <p>
   @param angle: the angle that the robot should turn. It is measured in degrees.
   @param power: the power on the move will be made.
   @param direction: movimentod the direction of the robot.
                     Can be forward or backward.
*/
sub move_arm( const int angle, const int power, const int direction ) {
  RotateMotor( MOTOR_ARM, power, angle * direction );
}

/* Read the distance between the ultrasonic sensor and the object.
   <p>
   @param port_sensor
*/
inline int read_distance_US_sensor( const int port_sensor ) {
   int distance = DISTNxDistance( port_sensor, MS_ADDR_DISTNX );
   
   return distance;
}

/* Make the Godzilla Roar */
inline char roar( ) {
//   return PlayFile( "godzilla_roar.rso" );
}
